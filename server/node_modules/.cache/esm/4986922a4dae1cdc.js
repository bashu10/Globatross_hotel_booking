let mongoose,bcrypt;_4da‍.x([["default",()=>_4da‍.o]]);_4da‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_4da‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);
const {Schema}= mongoose;


const userSchema= new Schema({
    name:{
        type: String,
        trim: true,
        required: 'Name is required'
    },

    email:{
        type: String,
        trim: true,
        required: 'Email is required',
        unique: true,
    },

    password:{
        type: String,
        required:true,
        min:6,
        max:64,
    },

    stripe_account_id:"",
    stripe_seller: {},
    stripeSession: {}
}
,{timestamps: true}
);

userSchema.pre('save', function(next){
    let user= this; 

    if(user.isModified('password')){
        return bcrypt.hash(user.password, 12, function(err,hash){
            if(err){
                _4da‍.g.console.log('BYCRYPT HASH ERROR', err);
                return next(err);
            }
            user.password=hash;
            return next();
        });
    } else{
        return next();
    }
});

 userSchema.methods.comparePassword=function(password,next){
     bcrypt.compare(password, this.password,function(err,match){
         if(err){
             _4da‍.g.console.log("COMPARE PASSWORD ERR",err);
             return next(err,false);
         }
         _4da‍.g.console.log("MATCH PASSWORD",match)
         return next(null, match);  
     });
 }; 

_4da‍.d(mongoose.model('User', userSchema));